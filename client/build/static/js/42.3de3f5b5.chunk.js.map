{"version":3,"file":"static/js/42.3de3f5b5.chunk.js","mappings":"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","sources":["services/api.js","hooks/useApi.jsx","components/Header.jsx","components/ComposeMail.jsx","config/sidebar.config.js","components/SideBarContent.jsx","components/SideBar.jsx","pages/Main.jsx","services/api.urls.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URI = \"\";\n\nconst API_GMAIL = async (serviceUrlObject, requestData = {}, type) => {\n  // type coming from useapi.jsx\n  // gmail api\n  const { params, urlParams, ...body } = requestData;\n\n  return await axios({\n    // it is asynchronous and so use async and await\n    method: serviceUrlObject.method,\n    url: `${API_URI}/${serviceUrlObject.endpoint}/${type}`, // passing the endpoint and the serviceobjecturl\n    data: requestData, // payload in case of post request needed to pass data, whose handling done in useapi\n  });\n};\n\nexport default API_GMAIL;\n","import { useState } from 'react';\nimport API from '../services/api';  // importing api.js\n\nconst useApi = (urlObject) => {  // object received as parameter from compose mail\n    const [response, setResponse] = useState(null);  // usestate used \n    const [error, setError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);  // spinner showing api is loading , initially spinner is not there\n\n    const call = async (payload, type = '') => {  // api call\n        setResponse(null);   // needed to be initiated by default values because api call will be there several times and if there is a previous value in setresponse, it will return that value    \n        setIsLoading(true);  // once api call is made spinner loads\n        setError(\"\");\n        \n        try {  // asynchronous request and so try catch needed to be used\n            let res = await API(urlObject, payload, type);  // api call is asynchronous and so await needed to be used\n            setResponse(res.data);  // many headers are there so we need to use .data to extract it\n        } catch (error) {\n            setError(error.message);  // error is in string form only in hook\n        } finally {  // whether execution is in try or catch, finally always runs\n            setIsLoading(false);  // finally api loads, spinner need to be set false everytime\n        }\n    }\n\n    return { call, response, error, isLoading };\n}\n\nexport default useApi;","\n\nimport { AppBar, Toolbar, Box, InputBase, styled } from '@mui/material';\nimport { Menu as MenuIcon, Tune, HelpOutlineOutlined, SettingsOutlined, \n    AppsOutlined, AccountCircleOutlined, Search } from '@mui/icons-material'\nimport { logo } from '../constants/constant';\n// styled app bar is basically use to apply css directly and then we use the name styled app bar instead of appbar in the below code\nconst StyledAppBar = styled(AppBar)`  \n    background: #f5F5F5;\n    box-shadow: none;\n`;\n// box instead of div allows to direct apply styling on it and also allow to use xm xl to adapt the layout based on screen size\nconst SearchWrapper = styled(Box)`\n    background: #EAF1FB;\n    margin-left: 80px;\n    border-radius: 8px;\n    min-width: 690px;\n    max-width: 720px;\n    height: 48px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 20px; \n    & > div {  \n        width: 100%\n    }\n`\n// &>div is used to apply css on this whole search bar(wrapped as box) child element (i.e the text field/inputbase)\nconst OptionsWrapper = styled(Box)`\n    width: 100%;\n    display: flex;\n    justify-content: end;\n    & > svg {\n        margin-left: 20px;\n    }\n`\n// & > svg is used to apply styles on this box(which contain all header icons(which are actually svgs)) , justify content: end moves this icons to the right end\nconst Header = ({ toggleDrawer }) => {  // object destructuring (used to extract props sended by parent)\n    // using action in color darkens our menu icon\n    return (\n        // in searchwrapper, we have wrapped searchicon, textfield like inputbase(more custom and specialized input components) and tune icon\n        // on click of the 3 lines button(menuicon), we will call toggledrawer and change the state\n        <StyledAppBar position=\"static\">\n            <Toolbar>\n                <MenuIcon color=\"action\" onClick={toggleDrawer} />   \n                <img src={logo} alt=\"logo\" style={{ width: 110, marginLeft: 10,height:50 }} />\n                <p style={{color:'black', marginLeft: 10,marginRight: 0}}>Mailing Master</p>\n                <SearchWrapper>\n                    <Search color=\"action\" /> \n                    <InputBase /> \n                    <Tune  color=\"action\"/>\n                </SearchWrapper>\n                \n                <OptionsWrapper>\n                    <HelpOutlineOutlined color=\"action\" />\n                    <SettingsOutlined color=\"action\" />\n                    <AppsOutlined color=\"action\" />\n                    <AccountCircleOutlined color=\"action\" />\n               </OptionsWrapper>\n            </Toolbar>\n        </StyledAppBar>\n    )\n}\n\nexport default Header;","import { useState } from 'react';\n\nimport { Dialog, styled, Typography, Box, InputBase, TextField, Button } from '@mui/material'; \nimport { Close, DeleteOutline } from '@mui/icons-material';\nimport useApi from '../hooks/useApi';  // importing use api custom hook\nimport { API_URLS } from '../services/api.urls';\n\nconst dialogStyle = {    // a function called by paperprops to set the design of dialog box\n    height: '90%',\n    width: '80%',\n    maxWidth: '100%',   // by default it is different and so we need to fix it here\n    maxHeight: '100%',  // by default it is different and so we need to fix it here\n    boxShadow: 'none',\n    borderRadius: '10px 10px 0 0',  // topleft, topright,bottomleft,bottomright radius of border\n}\n// using styled to apply styles and flex aligns all buttons in a line(applied on parent and aligns all child in one line)\n// space between take the two things to different ends\n// typography by default 16 pixel size\n// &>p allow us to access the p tag(typography) of the parent box and apply visual changes to it\nconst Header = styled(Box)`\n    display: flex;  \n    justify-content: space-between;\n    padding: 10px 15px;\n    background: #f2f6fc;\n    & > p {\n        font-size: 14px;\n        font-weight: 500;\n    }\n`;\n// wrapper below has two placeholder(textfields) which show the by default hint to what to write here\n// flex direction column arranges the two fields one under the another\n// accessing the div tag of inputbase(receipent and subject) and applying properties on it\nconst RecipientWrapper = styled(Box)`\n    display: flex;\n    flex-direction: column;  \n    padding: 0 15px;\n    & > div {\n        font-size: 14px;\n        border-bottom: 1px solid #F5F5F5;\n        margin-top: 10px;\n    }\n`;\n// flex in footer aligns all items in a line\nconst Footer = styled(Box)`\n    display: flex;\n    justify-content: space-between;\n    padding: 10px 15px;\n    align-items: center;\n`;\n// send button is styled version of button and we define styling here only\n// by default text tranform makes letter in capital and so switch it off we have to put none    \nconst SendButton = styled(Button)`\n    background: #0B57D0;\n    color: #fff;\n    font-weight: 500;\n    text-transform: none;  \n    border-radius: 18px;\n    width: 100px;\n`\n\nconst ComposeMail = ({ open, setOpenDrawer }) => {\n    const [data, setData] = useState({});  // data usestate to extract data\n    const sentEmailService = useApi(API_URLS.saveSentEmails);  // used from api urls that what mehtod needed to be applied \n    const saveDraftService = useApi(API_URLS.saveDraftEmails);\n    // in config we we directly enter the username and password, then it will be publically visible, which is not good\n    const config = {   // these are all the info\n        Host: \"smtp.elasticemail.com\",\n        Username: \"prateekjain@yopmail.com\",  // to pickup values from the env file we use this syntax\n        Password: \"CB512109CA308B250BD91AD29E0ADBD0DC61\",\n        Port: 2525,\n    }\n\n    const onValueChange = (e) => {\n        setData({ ...data, [e.target.name]: e.target.value })  // key is variable then it needs to be wrapped in [], its a key value pair\n    }  // target.name helps to distinguish between fields sended (subject,receipent) and value gives the value entered\n\n    const sendEmail = async (e) => {\n        e.preventDefault();\n\n        if (window.Email) {\n            window.Email.send({  // because email will be attached to the window\n                ...config,  // config is sprEAD USING SPREAD OPERATOR\n                To : data.to,\n                From : \"prateekjain.652@gmail.com\",\n                Subject : data.subject,\n                Body : data.body\n            }).then(\n                message => alert(message)\n            );\n        }\n\n        const payload = {   // payload containing info. of mail\n            to : data.to,\n            from : \"prateekjain.652@gmail.com\",\n            subject : data.subject,\n            body : data.body,\n            date: new Date(),\n            image: '',\n            name: 'Prateek',\n            starred: false,\n            type: 'sent'\n        }\n\n        sentEmailService.call(payload);  // data,request all sended to \n\n        if (!sentEmailService.error) {\n            setOpenDrawer(false);\n            setData({});\n        } else {\n\n        }\n    }\n\n    const closeComposeMail = (e) => {\n        e.preventDefault();  // browser kee default properties ko stop karne kei liye\n\n        const payload = {\n            to : data.to,\n            from : \"prateekjain.652@gmail.com\",\n            subject : data.subject,\n            body : data.body,\n            date: new Date(),\n            image: '',\n            name: 'Code for Interview',\n            starred: false,\n            type: 'drafts'\n        }\n\n        saveDraftService.call(payload);\n\n        if (!saveDraftService.error) {\n            setOpenDrawer(false);  // we set the property to false i.e. close the pop up\n            setData({});\n        } else {\n\n        }\n    }\n    // we have three boxes to wrap the header portion, the receipent,subject area and the third box is used for writing the text\n    // so we divided the compose dialog box in 3 sections\n    // in header we used the typography for writing new message and used the close icon by material ui(imported the icon)\n    return (\n        <Dialog\n            open={open}  \n            PaperProps={{ sx: dialogStyle }}  // it is like props where we are abel to send objects and this allows us to define dialogstyle and change the design here only\n        >  \n            <Header>  \n                <Typography>New Message</Typography>  \n                <Close fontSize=\"small\" onClick={(e) => closeComposeMail(e)} />\n            </Header> \n            <RecipientWrapper  > \n                \n                <InputBase placeholder='Recipients' name=\"to\" onChange={(e) => onValueChange(e)} value={data.to}   //to is the key and the value entered here will be set in data.to\n                 />    \n                <InputBase placeholder='Subject' name=\"subject\" onChange={(e) => onValueChange(e)} value={data.subject} />\n            </RecipientWrapper> \n            \n            <TextField   // textfield used whose prop multiline is used to enable writing long texts in multiline\n                multiline\n                rows={20}  // 20 rows space is there\n                sx={{ '& .MuiOutlinedInput-notchedOutline': { border: 'none' } }} // sx is used to handle internal props/class and the class written is taken from inspecting the page \n                name=\"body\"\n                onChange={(e) => onValueChange(e)}\n                value={data.body}\n            />\n            \n            <Footer> \n                <SendButton onClick={(e) => sendEmail(e)}>Send</SendButton>    \n                <DeleteOutline onClick={() => setOpenDrawer(false)}  />   \n            </Footer>\n        </Dialog>\n        // (e) kisne event ko trigger kiya, kyu kiya etcc.. info \n        // deleteoutline mei we have set the state of opendrawer to false\n        // on click of send button we need to close pop up and send the email       \n        // the delete outline icon is imported and used as an component here and send button(a styled component of button) also\n    )   // in receipent wrapper we apply onchange property on receipent and subject to detect change and trigger some action whenever user enter something in it\n}\n\nexport default ComposeMail;","import { routes } from \"../routes/routes\";\nimport {\n  Photo,\n  StarOutline,\n  SendOutlined,\n  InsertDriveFileOutlined,\n  DeleteOutlined,\n  MailOutlined,\n} from \"@mui/icons-material\";\n\nexport const SIDEBAR_DATA = [\n  {\n    name: \"inbox\",\n    title: \"Inbox\",\n    icon: Photo,\n    path: routes.emails.path,\n  },\n  {\n    name: \"starred\",\n    title: \"Starred\",\n    icon: StarOutline,\n    path: routes.emails.path,\n  },\n  {\n    name: \"sent\",\n    title: \"Sent\",\n    icon: SendOutlined,\n    path: routes.emails.path,\n  },\n  {\n    name: \"drafts\",\n    title: \"Drafts\",\n    icon: InsertDriveFileOutlined,\n    path: routes.emails.path,\n  },\n  {\n    name: \"bin\",\n    title: \"Bin\",\n    icon: DeleteOutlined,\n    path: routes.emails.path,\n  },\n  // {\n  //   name: \"allmail\",\n  //   title: \"All Mail\",\n  //   icon: MailOutlined,\n  //   path: routes.emails.path,\n  // },\n];\n","import { useState } from 'react';\nimport { Button, List, ListItem, Box, styled } from '@mui/material';\nimport ComposeMail from './ComposeMail';\nimport { SIDEBAR_DATA } from '../config/sidebar.config';  // sidebar data array has been imported\nimport { CreateOutlined } from '@mui/icons-material';\nimport { NavLink, useParams } from 'react-router-dom';  // use params a custom hook to use param in url\nimport { routes } from '../routes/routes';\n// &>ul directs to the items of the sidebar, cursor:pointer shows a hand as pointer\n// & > ul > li > svg  in list items, we go to an item by(li) and then we target the svg icon\nconst Container = styled(Box)`\n    padding: 8px;\n    & > ul {  \n        padding: 10px 0 0 5px;\n        font-size: 14px;\n        font-weight: 500;\n        cursor: pointer;\n        & > a {\n            text-decoration: none;\n            color: inherit;\n        }\n        & > a > li > svg {\n            margin-right: 20px;\n        }\n    }\n`\n// compose button styling\nconst ComposeButton = styled(Button)`  \n    background: #c2e7ff;\n    color: #001d35;\n    border-radius: 16px;\n    padding: 15px;\n    min-width: 140px;\n    text-transform: none;  \n`\n// text transform converts the text to uppercase, to get it in lowercase, we set it to none\nconst SideBarContent = () => {\n\n    const [openDrawer, setOpenDrawer] = useState(false); // usestate used to change state on clicking the button compose\n    // opendrawer is the current state and setopen changes its state\n    const { type } = useParams();\n\n    const onComposeClick = () => {\n        setOpenDrawer(true);  // on click of compoes this function is called and we set the state to true   \n    }\n    // create outlined is the pen of compose button\n    return (\n        <Container>\n            <ComposeButton onClick={() => onComposeClick()}>\n                <CreateOutlined style={{ marginRight: 10 }} />Compose\n            </ComposeButton>\n            <List>\n                {   // navlink to navigate between different views/components\n                    SIDEBAR_DATA.map(data => (  // so through a loop (by using map) we iterate the sidebar items from sidebar.config array (named SIDEBAR)\n                        <NavLink key={data.name} to={`${routes.emails.path}/${data.name}`}>  \n                            <ListItem style={ type === data.name.toLowerCase() ? {  // checking params(url we opened) and this data(which type we have) is equal\n                                backgroundColor: '#d3e3fd',     // if they match we need to change css of sidebar button(the page we have opened)\n                                borderRadius: '0 16px 16px 0'  // data.name is the list item name and data.icon is the icon set for this item\n                            } : {}}><data.icon fontSize=\"small\" />{data.title}</ListItem> \n                        </NavLink>\n                    )) // fontsize works as a prop \n                }\n            </List>\n            <ComposeMail open={openDrawer} setOpenDrawer={setOpenDrawer} />\n        </Container> // so in composemail we send the state of drawer as true or false\n        // setopendrawer is passed so that it can be used in composemail to switch its state to false on clicking the delete icon to close the pop up\n    )\n}\n\nexport default SideBarContent;","\nimport { Drawer, styled } from \"@mui/material\";  // styles should be imported from material ui\n\nimport SideBarContent from \"./SideBarContent\";\n\nconst StyledDrawer = styled(Drawer)`\n    margin-top: 54px;\n`\n\nconst SideBar = ({ toggleDrawer, openDrawer }) => {\n\n    return (\n        <StyledDrawer\n            anchor='left'  // to shift the drawer to the left side of page\n            open={openDrawer}   // generally open remain true, so that when we open page it by default slides out\n            // through props the value of openDrawer keeps on toggling and we put this here(now not hardcoded)\n            onClose={toggleDrawer}\n            hideBackdrop={true}  // when sidebar opens the main page becomes dull/black, turn off this thing\n            ModalProps={{\n                keepMounted: true, // mounted means that render method is called and component's elements and content are now part of the DOM (visible)\n            }}  // keep mounted keep the contents visible, the text is just hided when it goes in, but they are not remounted again to show contents\n            variant=\"persistent\" // sidebar (Drawer) will remain open and persistently visible on the screen, even when interacting with the main content or other parts of the user interface\n            sx={{\n                '& .MuiDrawer-paper': {  // the top part of sidebar which need to be lowered down a bit\n                    width: 250,\n                    borderRight: 'none',\n                    background: '#f5F5F5',\n                    marginTop: '64px',  // needed to be put in string to avoid rem sizes\n                    height: 'calc(100vh - 64px)'  // to remove the scroll bar from the bottom(total height-the height of top section)\n                },\n            }}\n          >\n            <SideBarContent /> \n        </StyledDrawer>\n    ) // sidebarcontent is created differently and then this component is added int his sidebar\n}\n\nexport default SideBar;","import { useState, Suspense } from 'react';\n\nimport { Header, SideBar } from '../components';\nimport { Box, styled } from '@mui/material';\nimport { Outlet } from 'react-router-dom';\nimport SuspenseLoader from '../components/common/SuspenseLoader';\n\nconst Wrapper = styled(Box)`\n    display: flex;\n`;\n\nconst Main = () => {\n\n    const [openDrawer, setOpenDrawer] = useState(true);  // initialized value is true\n    // we are managing the state and we need to toggle the value through setopendrawer\n    const toggleDrawer = () => {  // use to toggle the value\n        setOpenDrawer(prevState => !prevState);  // swithces the value(0->1 or 1->0)\n    }\n    // sending the props to header to open and close the drawer thorugh button click\n    return (\n        <>\n            <Header toggleDrawer={toggleDrawer} />  \n            <Wrapper>\n                <SideBar toggleDrawer={toggleDrawer} openDrawer={openDrawer} />\n                <Suspense fallback={<SuspenseLoader />} >\n                    <Outlet context={{ openDrawer }} />\n                </Suspense>\n            </Wrapper>\n        </>\n    )\n}\n\nexport default Main;","export const API_URLS = {\n  saveSentEmails: {\n    endpoint: \"save\",\n    method: \"POST\",\n  },\n  saveDraftEmails: {\n    endpoint: \"save-draft\",\n    method: \"POST\",\n  },\n  getEmailFromType: {\n    // to find the type so as to show mails accordingly\n    endpoint: \"emails\",\n    method: \"GET\", // to fetch according to selected option\n  },\n  toggleStarredMails: {\n    endpoint: \"starred\",\n    method: \"POST\",\n  },\n  deleteEmails: {\n    endpoint: \"delete\",\n    method: \"DELETE\",\n  },\n  moveEmailsToBin: {\n    endpoint: \"bin\",\n    method: \"POST\",\n  },\n};\n"],"names":["API_GMAIL","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","serviceUrlObject","requestData","type","_args","arguments","wrap","_context","prev","next","length","undefined","params","urlParams","_objectWithoutProperties","_excluded","axios","method","url","concat","endpoint","data","abrupt","sent","stop","_x","apply","urlObject","_useState","useState","_useState2","_slicedToArray","response","setResponse","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","call","payload","res","API","t0","message","finish","StyledAppBar","styled","AppBar","_templateObject","_taggedTemplateLiteral","SearchWrapper","Box","_templateObject2","OptionsWrapper","_templateObject3","toggleDrawer","_jsx","position","children","_jsxs","Toolbar","MenuIcon","color","onClick","src","logo","alt","style","width","marginLeft","height","marginRight","Search","InputBase","Tune","HelpOutlineOutlined","SettingsOutlined","AppsOutlined","AccountCircleOutlined","dialogStyle","maxWidth","maxHeight","boxShadow","borderRadius","Header","RecipientWrapper","Footer","SendButton","Button","_templateObject4","open","setOpenDrawer","setData","sentEmailService","useApi","API_URLS","saveSentEmails","saveDraftService","saveDraftEmails","config","Host","Username","Password","Port","onValueChange","e","_objectSpread","_defineProperty","target","name","value","sendEmail","_ref2","preventDefault","window","Email","send","To","to","From","Subject","subject","Body","body","then","alert","from","date","Date","image","starred","Dialog","PaperProps","sx","Typography","Close","fontSize","closeComposeMail","placeholder","onChange","TextField","multiline","rows","border","DeleteOutline","SIDEBAR_DATA","title","icon","Photo","path","routes","emails","StarOutline","SendOutlined","InsertDriveFileOutlined","DeleteOutlined","Container","ComposeButton","openDrawer","useParams","CreateOutlined","List","map","NavLink","ListItem","toLowerCase","backgroundColor","ComposeMail","StyledDrawer","Drawer","anchor","onClose","hideBackdrop","ModalProps","keepMounted","variant","borderRight","background","marginTop","SideBarContent","Wrapper","prevState","_Fragment","SideBar","Suspense","fallback","SuspenseLoader","Outlet","context","getEmailFromType","toggleStarredMails","deleteEmails","moveEmailsToBin"],"sourceRoot":""}